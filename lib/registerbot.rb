require 'telegram/bot'
require 'sequel'
require 'fileutils'
require 'logger'
require 'thread/pool'
require './lib/registerbot/message_handler'
require './lib/registerbot/feedback_processor'
require './lib/registerbot/reports_processor'
require './lib/registerbot/help_processor'
require './lib/registerbot/commands'


# The Class receiving the incoming messages by users from the Telegram Bot-API as well as command line inputs.
#   Runs a listen loop that regularly fetches all updates in chats with the bot.
class Registerbot

    # Creates a new `Registerbot` instance.
    #   Creates one instance of `Message_Handler` to handle incoming messages.
    #
    # @param bot_token [String] a bot token generated by the Telegram Bot Father to identify the correct Bot to control
    # @param db [Sequel::Database] a Database used to store all reports and feedback
    # @param image_path [String] a path to a folder in which we will store all images send along the reports
    def initialize(bot_token, db, image_path, log_path)
        
        # initialize a logger
        @logger = Logger.new(log_path)
        @logger.level = Logger::DEBUG
        
         
        # Define the Bot options
        bot_options = {
            offset: 0,
            timeout: 20,
            logger: @logger,
            url: 'https://api.telegram.org'
          }

        # Create the `Telegram::Bot::Client` which listens to user messages
        @bot = Telegram::Bot::Client::new(bot_token, bot_options)
        @message_handler = Message_handler::new(@bot, db, image_path, bot_token, @logger)
    end

    # Start the bot, make it listen for updates on both console and chat sides
    def run
        bot_thread = Thread.new{bot_loop}
        console_thread = Thread.new(console_loop)
        bot_thread.join
        console_thread.join
        @logger.info("Shutting Down")
    end

    # Starts the process of listening for incoming commands via the console
    def console_loop
        while 1 do
            command = gets
            @logger.debug("Received Console input: #{command}")  
        end
    end

    # Starts the process of listening for incoming messages / updates on all chats of the bot. As per documentation, the bot scans for updates every 1 seconds.
    def bot_loop
        
        pool = Thread.pool(50)
        # Get incoming message
        @bot.listen do |message|
            # Skip Messages that aren't Messages from the user, such as channel updates, edits and user profile updates
            next if message.class.name != "Telegram::Bot::Types::Message"
            pool.process do
                @message_handler.handle_message(message)
            end
        end
    end     
end
